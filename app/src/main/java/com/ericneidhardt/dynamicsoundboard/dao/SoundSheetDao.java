package com.ericneidhardt.dynamicsoundboard.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ericneidhardt.dynamicsoundboard.dao.SoundSheet;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SOUND_SHEET.
*/
public class SoundSheetDao extends AbstractDao<SoundSheet, Long> {

    public static final String TABLENAME = "SOUND_SHEET";

    /**
     * Properties of entity SoundSheet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FragmentTag = new Property(1, String.class, "fragmentTag", false, "FRAGMENT_TAG");
        public final static Property Label = new Property(2, String.class, "label", false, "LABEL");
        public final static Property IsSelected = new Property(3, boolean.class, "isSelected", false, "IS_SELECTED");
    };


    public SoundSheetDao(DaoConfig config) {
        super(config);
    }
    
    public SoundSheetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SOUND_SHEET' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FRAGMENT_TAG' TEXT NOT NULL UNIQUE ," + // 1: fragmentTag
                "'LABEL' TEXT NOT NULL ," + // 2: label
                "'IS_SELECTED' INTEGER NOT NULL );"); // 3: isSelected
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SOUND_SHEET'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SoundSheet entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFragmentTag());
        stmt.bindString(3, entity.getLabel());
        stmt.bindLong(4, entity.getIsSelected() ? 1l: 0l);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SoundSheet readEntity(Cursor cursor, int offset) {
        SoundSheet entity = new SoundSheet( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // fragmentTag
            cursor.getString(offset + 2), // label
            cursor.getShort(offset + 3) != 0 // isSelected
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SoundSheet entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFragmentTag(cursor.getString(offset + 1));
        entity.setLabel(cursor.getString(offset + 2));
        entity.setIsSelected(cursor.getShort(offset + 3) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SoundSheet entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SoundSheet entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
