package org.neidhardt.dynamicsoundboard.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.neidhardt.dynamicsoundboard.dao.MediaPlayerData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEDIA_PLAYER_DATA".
*/
public class MediaPlayerDataDao extends AbstractDao<MediaPlayerData, Long> {

    public static final String TABLENAME = "MEDIA_PLAYER_DATA";

    /**
     * Properties of entity MediaPlayerData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PlayerId = new Property(1, String.class, "playerId", false, "PLAYER_ID");
        public final static Property FragmentTag = new Property(2, String.class, "fragmentTag", false, "FRAGMENT_TAG");
        public final static Property Label = new Property(3, String.class, "label", false, "LABEL");
        public final static Property Uri = new Property(4, String.class, "uri", false, "URI");
        public final static Property IsLoop = new Property(5, boolean.class, "isLoop", false, "IS_LOOP");
        public final static Property IsInPlaylist = new Property(6, boolean.class, "isInPlaylist", false, "IS_IN_PLAYLIST");
        public final static Property TimePosition = new Property(7, Long.class, "timePosition", false, "TIME_POSITION");
        public final static Property SortOrder = new Property(8, Integer.class, "sortOrder", false, "SORT_ORDER");
    };


    public MediaPlayerDataDao(DaoConfig config) {
        super(config);
    }
    
    public MediaPlayerDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEDIA_PLAYER_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PLAYER_ID\" TEXT NOT NULL UNIQUE ," + // 1: playerId
                "\"FRAGMENT_TAG\" TEXT NOT NULL ," + // 2: fragmentTag
                "\"LABEL\" TEXT NOT NULL ," + // 3: label
                "\"URI\" TEXT NOT NULL ," + // 4: uri
                "\"IS_LOOP\" INTEGER NOT NULL ," + // 5: isLoop
                "\"IS_IN_PLAYLIST\" INTEGER NOT NULL ," + // 6: isInPlaylist
                "\"TIME_POSITION\" INTEGER," + // 7: timePosition
                "\"SORT_ORDER\" INTEGER);"); // 8: sortOrder
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEDIA_PLAYER_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MediaPlayerData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPlayerId());
        stmt.bindString(3, entity.getFragmentTag());
        stmt.bindString(4, entity.getLabel());
        stmt.bindString(5, entity.getUri());
        stmt.bindLong(6, entity.getIsLoop() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsInPlaylist() ? 1L: 0L);
 
        Long timePosition = entity.getTimePosition();
        if (timePosition != null) {
            stmt.bindLong(8, timePosition);
        }
 
        Integer sortOrder = entity.getSortOrder();
        if (sortOrder != null) {
            stmt.bindLong(9, sortOrder);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MediaPlayerData readEntity(Cursor cursor, int offset) {
        MediaPlayerData entity = new MediaPlayerData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // playerId
            cursor.getString(offset + 2), // fragmentTag
            cursor.getString(offset + 3), // label
            cursor.getString(offset + 4), // uri
            cursor.getShort(offset + 5) != 0, // isLoop
            cursor.getShort(offset + 6) != 0, // isInPlaylist
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // timePosition
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // sortOrder
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MediaPlayerData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlayerId(cursor.getString(offset + 1));
        entity.setFragmentTag(cursor.getString(offset + 2));
        entity.setLabel(cursor.getString(offset + 3));
        entity.setUri(cursor.getString(offset + 4));
        entity.setIsLoop(cursor.getShort(offset + 5) != 0);
        entity.setIsInPlaylist(cursor.getShort(offset + 6) != 0);
        entity.setTimePosition(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setSortOrder(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MediaPlayerData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MediaPlayerData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
